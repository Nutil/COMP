/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{   LOOKAHEAD=1;}PARSER_BEGIN(Matrix)
import java.util.Hashtable;


public class Matrix{
  public static String currentSymbol;
  public static String currentSymbolString; 
  public static Hashtable<String, String> symbolTable;
    public static void main(String args []) throws ParseException  {    Matrix parser = new Matrix(System.in);
    parser.currentSymbol = null;
    parser.currentSymbolString = null;
    parser.symbolTable = new Hashtable< String, String >();
	SimpleNode root = parser.S();
	root.dump("");
	
  }}PARSER_END(Matrix)SKIP :{  " "| "\r"| "\t"}TOKEN : /* OPERATORS */{  < PLUS : "+" > | < MINUS : "-" >| < MULTIPLY : "*" >
| < TRANSPOSE: "'" >| < EQUALS: "=" >
| < DOUBLE_POINT : ":" >

| < BRACKET_LEFT: "[" >
| < BRACKET_RIGHT: "]" >
| < PARENTHESIS_LEFT: "(" >
| < PARENTHESIS_RIGHT: ")" >
| < INPUT : "input" >
| < OUTPUT : "output" >

| < SYMBOL: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])* >
| < TYPE: "boolean" | "byte" | "short" | "int" | "long" | "float" | "double" >
| < DOUBLE:  (["0"-"9"])+ ("." (["0"-"9"])+)? >|   < CONSTANT : (< DIGIT >)+ >| < DIGIT : [ "0"-"9" ] >
| < LF: "\n" > 
}


SimpleNode S() : {}{
  Expr()
  < LF >  {    return jjtThis;
  }}

void Expr() #void:{Token i;}
{
  (
   <INPUT> i=< SYMBOL >   {
	symbolTable.put(i.image, "");
	currentSymbol = i.image;
	currentSymbolString = "";
    
	//jjtThis.value = i.image;
    }#Input
     < DOUBLE_POINT > Array() ";"
     {
       symbolTable.put(currentSymbol, currentSymbolString);
       currentSymbol=null;
       currentSymbolString="";     }
    < LF >
  )+
  (  < OUTPUT > i=< SYMBOL >
   {
   	if(symbolTable.get(i.image) != null) {
   		System.err.println("Can't output to a variable you've already initialized!");
   		return;
   	}
	symbolTable.put(i.image, "");
	currentSymbol = i.image;
	currentSymbolString = "";

	//jjtThis.value = i.image;

	}
	#Output
    < DOUBLE_POINT > MathExpression() ";"     {
       symbolTable.put(currentSymbol, currentSymbolString);
       currentSymbol=null;
       currentSymbolString="";
     }
  )?}

void Array()#void:{Token i;}{
i=< BRACKET_LEFT >{
  currentSymbolString += i.image;}
Valores()
i=< BRACKET_RIGHT >{
  currentSymbolString += i.image;}  }
void Valores() :{}{
  (InnerArray())
  {
    currentSymbolString += ",";  }
  (","InnerArray())*}


void InnerArray():{Token i;}{   i=< BRACKET_LEFT >   {
     currentSymbolString += i.image;   }    V()   {
     currentSymbolString += ",";   }
   (","V())*   i=< BRACKET_RIGHT >
   {
     currentSymbolString += i.image;
   } }

void V()#void:{Token i;} 
{
  i=< DOUBLE >{
	jjtThis.value = i.image;
	currentSymbolString += i.image;
    }#Term
 }

void MathExpression() :{}{
	(
    	Priority1(1)
	)+}

void Priority1(int sign) #void:{}{
 Priority2(sign)
 
 (
 < PLUS >
 {
   currentSymbolString += "+";
 }
 Priority2(1) #Add(2)
 |
 < MINUS >
  {
   currentSymbolString += "-";
  }
 Priority2(1) #Sub(2)
 )?
 
}

void Priority2(int sign) #void: {} // 1: positive; -1: negative
{
 Priority3(sign)
 (
  < MULTIPLY >
   {
   currentSymbolString += "*";
   }
 Priority3(1) #Mul(2)
 )?
}

void Priority3(int sign) #void: {} // 1: positive; -1: negative
{
 Priority4(sign)
 (
  < TRANSPOSE >
 {
   currentSymbolString += "'";
 }
 )?
 (
   Priority4(1) #Tra(2)
 )?
}

void Priority4(int sign) #void: {Token i;}
{
 < PARENTHESIS_LEFT >
 {
   currentSymbolString += "(";
 }
  Priority1(sign)
  < PARENTHESIS_RIGHT >
 {
   currentSymbolString += ")";
 }
 | i=< SYMBOL >
 {
   	if(symbolTable.get(i.image) == null) {
   		System.err.println("Uninitialized variable");
   		return;
   	}

   	currentSymbolString += i.image;
   	
 } #Term
}
