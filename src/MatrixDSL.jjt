/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{   LOOKAHEAD=1;}PARSER_BEGIN(Matrix)
public class Matrix{  public static void main(String args []) throws ParseException  {    Matrix parser = new Matrix(System.in);
	SimpleNode root = parser.S();
	root.dump("");
	
  }}PARSER_END(Matrix)SKIP :{  " "| "\r"| "\t"}TOKEN : /* OPERATORS */{  < PLUS : "+" > | < MINUS : "-" >| < MULTIPLY : "*" >
| < TRANSPOSE: "'" >| < EQUALS: "=" >
| < DOUBLE_POINT : ":" >

| < BRACKET_LEFT: "[" >
| < BRACKET_RIGHT: "]" >
| < INPUT : "input" >
| < OUTPUT : "output" >

| < SYMBOL: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])* >
| < TYPE: "boolean" | "byte" | "short" | "int" | "long" | "float" | "double" >
| < INTEGER: (["0"-"9"])+ >
| < DOUBLE:  (["0"-"9"])+ ("." (["0"-"9"])+)? >|   < CONSTANT : (< DIGIT >)+ >| < DIGIT : [ "0"-"9" ] >
| < LF: "\n" > 
}


SimpleNode S() : {}{
  (   <INPUT> < SYMBOL > < DOUBLE_POINT > Array() ";" | < OUTPUT > < SYMBOL > ";"
  )+
  < LF >  {    return jjtThis;
  }}

void Array():{}{
< BRACKET_LEFT > (InnerArray())(","InnerArray())*  < BRACKET_RIGHT >  }
void InnerArray():{Token i;}{   < BRACKET_LEFT >      V()   < BRACKET_RIGHT >   }

void V():{Token i,s;} 
{
  i=< INTEGER >{
	jjtThis.val = i.image;
    } #Term
    [
    ","V()
    ]
  
}
