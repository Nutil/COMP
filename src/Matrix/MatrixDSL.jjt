/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{   LOOKAHEAD=1;}PARSER_BEGIN(Matrix)
package Matrix;


import java.util.Scanner;
import java.util.Hashtable;
import java.util.HashMap;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import semantica.Semantica;
import codeGeneration.CodeGenerator;

public class Matrix{
  public static String currentSymbol;
  public static String currentSymbolString; 
  public static Hashtable<String, String> symbolTable;

  public Matrix() {
	 
		this(new ByteArrayInputStream("".getBytes()));
	}

	public static void percorreGrafo(Node node, String prefix) {
	
		  	SimpleNode n = (SimpleNode) node; 
	  	
		  	Object obj = n.jjtGetValue();
			System.out.println(prefix + n.toString() + "-" + obj);
	
			for(int i = 0; i < n.jjtGetNumChildren(); i++) {
				percorreGrafo(n.jjtGetChild(i), prefix + "\t");
			}
		}
	    public static void main(String args [])throws Exception  {


 	System.out.println("Escreva o nomo do ficheiro de teste (exemplo : ficheiroTeste.java): ");
	  Scanner sc = new Scanner(System.in);
	  String exemplo= sc.nextLine();
       
    FileInputStream file = new FileInputStream("src/exemplos/"+exemplo);    Matrix parser = new Matrix();

    ReInit(file);
	SimpleNode root = parser.S();

	Semantica semantica= new Semantica();
	semantica.analise(root);
	HashMap<String, double[][]> inputTable = semantica.getInputTable();

	percorreGrafo(root, ": ");
	CodeGenerator generator = new CodeGenerator(inputTable,root,semantica.getOutputName());
	generator.generate();
	generator.closeOutput();

	System.out.println("Ficheiro criado\n");
  }}PARSER_END(Matrix)

< DEFAULT > SKIP:
{
"/*@MatrixDSL" : DSL // começas a aceitar os tokens de <DSL> a partir do momento que lês essa string
}

< DEFAULT > SKIP: // das skip a tudo
{
 < ~[] >
}

< DSL > TOKEN:
{
    < ENDMATRIX :"@MatrixDSL*/" > : DEFAULT // quando lês esta string voltas ao estado de aceitar código aleatório
}

/*
< END > TOKEN:
{
  < ENDFILE :  "\n" | "\r" >
}
*/
< DSL > SKIP :{  " "| "\r"| "\t"}<  DSL > TOKEN : /* OPERATORS */{  < PLUS : "+" > | < MINUS : "-" >| < MULTIPLY : "*" >
| < TRANSPOSE: "'" >| < EQUALS: "=" >
| < DOUBLE_POINT : ":" >
| < COMMA : "," >
| < SEMICOLON : ";" >

| < BRACKET_LEFT: "[" >
| < BRACKET_RIGHT: "]" >
| < PARENTHESIS_LEFT: "(" >
| < PARENTHESIS_RIGHT: ")" >
| < INPUT : "input" >
| < OUTPUT : "output" >

| < DOUBLE:  ("-")? (["0"-"9"])+ ("." (["0"-"9"])+)? >| < DIGIT : [ "0"-"9" ] >
| < LF: "\n" >
| < SYMBOL: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])* >

}



SimpleNode S() : {}{
  Expr()  {
    return jjtThis;
  }}

void Expr() #void:{Token i;}
{
	< LF >	(
	  Input() < LF >
	)+
	Output() < LF >
	< ENDMATRIX >	}

void Input() #input :{Token i;}{
   <INPUT> i=< SYMBOL >
   {  
	jjtThis.jjtSetValue( i.image);
    }
    < DOUBLE_POINT > Array() < SEMICOLON >

  }


void Output()  #output:{Token i;}
{
    (
  < OUTPUT > i=< SYMBOL >
   {
	jjtThis.jjtSetValue(i.image);

	}
    < DOUBLE_POINT > MathExpression() < SEMICOLON >
  )?
}

void Array()#void:{Token i;}{
< BRACKET_LEFT >
  InnerArray()
  (< COMMA >InnerArray())*
< BRACKET_RIGHT > }

void InnerArray():{}{   < BRACKET_LEFT >     Term()  
   (< COMMA >Term())*   < BRACKET_RIGHT >
  }

void Term():{Token i;} 
{
  i=< DOUBLE >{
	jjtThis.jjtSetValue(Double.parseDouble(i.image));
    }
 } 

void MathExpression() #void:{}{
	(
    	Priority1(1)
	)+}

void Priority1(int sign) #void:{}{
 Priority2(sign)
 (
	( < PLUS > Priority2(1) #Add(2) ) |
	( < MINUS > Priority2(1) #Sub(2) )
 )?
 
}

void Priority2(int sign) #void: {} // 1: positive; -1: negative
{
 Priority3(sign)
 (
  < MULTIPLY >
 Priority3(1) #Mul(2)
 )?
}

void Priority3(int sign) #void: {} // 1: positive; -1: negative
{
 Priority4(sign)
 (
	< TRANSPOSE > #Tra(1) afterTranspose(sign)
 )?
 
}

void afterTranspose(int sign) #void: {} // 1: positive; -1: negative
{
	(
	 ( < PLUS > Priority4(sign) #Add(2) )|
	 ( < MINUS > Priority4(sign) #Sub(2) )|
	 ( < MULTIPLY > Priority4(sign) #Mul(2) )
	)?
}

void Priority4(int sign) #void: {Token i;}
{
 < PARENTHESIS_LEFT >
  Priority1(sign)
  < PARENTHESIS_RIGHT >

 | i=< SYMBOL >
 {
   jjtThis.jjtSetValue( i.image); 	
 } #Matrix
}
