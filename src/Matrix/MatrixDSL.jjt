/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{   LOOKAHEAD=1;}PARSER_BEGIN(Matrix)
package Matrix;


import java.util.Hashtable;
import java.util.HashMap;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import semantica.Semantica;
import codeGeneration.CodeGenerator;

public class Matrix{
  public static String currentSymbol;
  public static String currentSymbolString; 
  public static Hashtable<String, String> symbolTable;

	public static void percorreGrafo(Node node, String prefix) {
	
		  	SimpleNode n = (SimpleNode) node; 
	  	
		  	Object obj = n.jjtGetValue();
			System.out.println(prefix + n.toString() + "-" + obj);
	
			for(int i = 0; i < n.jjtGetNumChildren(); i++) {
				percorreGrafo(n.jjtGetChild(i), prefix + "\t");
			}
		}
	    public static void main(String args [])throws Exception  {    Matrix parser = new Matrix(System.in);
	SimpleNode root = parser.S();

	Semantica semantica= new Semantica();
	semantica.analise(root);
	HashMap<String, double[][]> inputTable = semantica.getInputTable();

	percorreGrafo(root, ": ");
	CodeGenerator generator = new CodeGenerator(inputTable);
	generator.generate();
	generator.closeOutput();

	//File matrixFile = new File("matrix.java");
	
	//Files.move(generator.getGeneratedFile().getPath(), (new File("matrix.java")).toPath(), StandardCopyOption.ATOMIC_MOVE);
	System.out.println("Ficheiro criado\n");

	

  }}PARSER_END(Matrix)SKIP :{  " "| "\r"| "\t"}TOKEN : /* OPERATORS */{  < PLUS : "+" > | < MINUS : "-" >| < MULTIPLY : "*" >
| < TRANSPOSE: "'" >| < EQUALS: "=" >
| < DOUBLE_POINT : ":" >

| < BRACKET_LEFT: "[" >
| < BRACKET_RIGHT: "]" >
| < PARENTHESIS_LEFT: "(" >
| < PARENTHESIS_RIGHT: ")" >
| < INPUT : "input" >
| < OUTPUT : "output" >

| < SYMBOL: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])* >
| < TYPE: "boolean" | "byte" | "short" | "int" | "long" | "float" | "double" >
| < DOUBLE:  (["0"-"9"])+ ("." (["0"-"9"])+)? >|   < CONSTANT : (< DIGIT >)+ >| < DIGIT : [ "0"-"9" ] >
| < LF: "\n" > 
}


SimpleNode S() : {}{
  Expr()
  < LF >  {    return jjtThis;
  }}

void Expr() #void:{Token i;}
{
   (    Input()< LF >
  )+
  Output()
 }

void Input() #input :{Token i;}{
   <INPUT> i=< SYMBOL >
   {  
	jjtThis.jjtSetValue( i.image);
    }
    < DOUBLE_POINT > Array() ";"

  }


void Output()  #output:{Token i;}
{
    (
  < OUTPUT > i=< SYMBOL >
   {
	jjtThis.jjtSetValue(i.image);

	}
    < DOUBLE_POINT > MathExpression() ";"
  )?
}

void Array()#void:{Token i;}{
< BRACKET_LEFT >
Valores()
< BRACKET_RIGHT > }
void Valores() #void:{}{
  (InnerArray())
  (","InnerArray())*}


void InnerArray():{}{   < BRACKET_LEFT >     Term()  
   (","Term())*   < BRACKET_RIGHT >
  }

void Term():{Token i;} 
{
  i=< DOUBLE >{
	jjtThis.jjtSetValue(Double.parseDouble(i.image));
    }
 } 

void MathExpression() #void:{}{
	(
    	Priority1(1)
	)+}

void Priority1(int sign) #void:{}{
 Priority2(sign)
 (
 < PLUS >
 Priority2(1) #Add(2)
 |
 < MINUS >
 Priority2(1) #Sub(2)
 )?
 
}

void Priority2(int sign) #void: {} // 1: positive; -1: negative
{
 Priority3(sign)
 (
  < MULTIPLY >
 Priority3(1) #Mul(2)
 )?
}

void Priority3(int sign) #void: {} // 1: positive; -1: negative
{
 Priority4(sign)
 (
  < TRANSPOSE >
 )?
 (
   Priority4(1) #Tra(2)
 )?
}

void Priority4(int sign) #void: {Token i;}
{
 < PARENTHESIS_LEFT >
  Priority1(sign)
  < PARENTHESIS_RIGHT >

 | i=< SYMBOL >
 {
   jjtThis.jjtSetValue( i.image); 	
 } #Matrix
}
