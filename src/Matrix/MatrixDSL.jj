/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. MatrixDSL.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{   LOOKAHEAD=1;}PARSER_BEGIN(Matrix)
package Matrix;


import java.util.Hashtable;

import semantica.Semantica;

public class Matrix/*@bgen(jjtree)*/implements MatrixTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected static JJTMatrixState jjtree = new JJTMatrixState();

/*@egen*/
  public static String currentSymbol;
  public static String currentSymbolString; 
  public static Hashtable<String, String> symbolTable;

	public static void percorreGrafo(Node node, String prefix) {
	
		  	SimpleNode n = (SimpleNode) node; 
	  	
		  	Object obj = n.jjtGetValue();
			System.out.println(prefix + n.toString() + "-" + obj);
	
			for(int i = 0; i < n.jjtGetNumChildren(); i++) {
				percorreGrafo(n.jjtGetChild(i), prefix + "   ");
			}
		}
	    public static void main(String args [])throws Exception  {    Matrix parser = new Matrix(System.in);
    parser.currentSymbol = null;
    parser.currentSymbolString = null;
    parser.symbolTable = new Hashtable< String, String >();
	SimpleNode root = parser.S();

	Semantica.analise(root);
	Matrix.percorreGrafo(root,"");

  }}PARSER_END(Matrix)SKIP :{  " "| "\r"| "\t"}TOKEN : /* OPERATORS */{  < PLUS : "+" > | < MINUS : "-" >| < MULTIPLY : "*" >
| < TRANSPOSE: "'" >| < EQUALS: "=" >
| < DOUBLE_POINT : ":" >

| < BRACKET_LEFT: "[" >
| < BRACKET_RIGHT: "]" >
| < PARENTHESIS_LEFT: "(" >
| < PARENTHESIS_RIGHT: ")" >
| < INPUT : "input" >
| < OUTPUT : "output" >

| < SYMBOL: ["A"-"Z","a"-"z"](["0"-"9","A"-"Z","a"-"z"])* >
| < TYPE: "boolean" | "byte" | "short" | "int" | "long" | "float" | "double" >
| < DOUBLE:  (["0"-"9"])+ ("." (["0"-"9"])+)? >|   < CONSTANT : (< DIGIT >)+ >| < DIGIT : [ "0"-"9" ] >
| < LF: "\n" > 
}


SimpleNode S() : {/*@bgen(jjtree) S */
  SimpleNode jjtn000 = new SimpleNode(JJTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) S */
  try {
/*@egen*/
  Expr()
  < LF >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/  {    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/}

void Expr()      :{Token i;}
{
   (    Input()< LF >
  )+
  Output()
 }

void Input()        :{/*@bgen(jjtree) input */
                      SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token i;}{/*@bgen(jjtree) input */
   try {
/*@egen*/
   <INPUT> i=< SYMBOL >
   {  
	jjtn000.jjtSetValue( i.image);
    }
    < DOUBLE_POINT > Array() ";"/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/

  }


void Output()         :{/*@bgen(jjtree) output */
                        SimpleNode jjtn000 = new SimpleNode(JJTOUTPUT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token i;}
{/*@bgen(jjtree) output */
    try {
/*@egen*/
    (
  < OUTPUT > i=< SYMBOL >
   {
	jjtn000.jjtSetValue(i.image);

	}
    < DOUBLE_POINT > MathExpression() ";"
  )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Array()     :{Token i;}{
< BRACKET_LEFT >
Valores()
< BRACKET_RIGHT > }
void Valores()      :{}{
  (InnerArray())
  (","InnerArray())*}


void InnerArray():{/*@bgen(jjtree) InnerArray */
  SimpleNode jjtn000 = new SimpleNode(JJTINNERARRAY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InnerArray */
   try {
/*@egen*/   < BRACKET_LEFT >     Term()  
   (","Term())*   < BRACKET_RIGHT >/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
  }

void Term():{/*@bgen(jjtree) Term */
             SimpleNode jjtn000 = new SimpleNode(JJTTERM);
             boolean jjtc000 = true;
             jjtree.openNodeScope(jjtn000);
/*@egen*/Token i;} 
{/*@bgen(jjtree) Term */
  try {
/*@egen*/
  i=< DOUBLE >/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{
	jjtn000.jjtSetValue(Double.parseDouble(i.image));
    }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
 } 

void MathExpression()      :{}{
	(
    	Priority1(1)
	)+}

void Priority1(int sign)      :{}{
 Priority2(sign)
 (
 < PLUS >/*@bgen(jjtree) #Add( 2) */
 {
   SimpleNode jjtn001 = new SimpleNode(JJTADD);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 Priority2(1)/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  2);
   }
 }
/*@egen*/        
 |
 < MINUS >/*@bgen(jjtree) #Sub( 2) */
 {
   SimpleNode jjtn002 = new SimpleNode(JJTSUB);
   boolean jjtc002 = true;
   jjtree.openNodeScope(jjtn002);
 }
 try {
/*@egen*/
 Priority2(1)/*@bgen(jjtree)*/
 } catch (Throwable jjte002) {
   if (jjtc002) {
     jjtree.clearNodeScope(jjtn002);
     jjtc002 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte002 instanceof RuntimeException) {
     throw (RuntimeException)jjte002;
   }
   if (jjte002 instanceof ParseException) {
     throw (ParseException)jjte002;
   }
   throw (Error)jjte002;
 } finally {
   if (jjtc002) {
     jjtree.closeNodeScope(jjtn002,  2);
   }
 }
/*@egen*/        
 )?
 
}

void Priority2(int sign)      : {} // 1: positive; -1: negative
{
 Priority3(sign)
 (
  < MULTIPLY >/*@bgen(jjtree) #Mul( 2) */
 {
   SimpleNode jjtn001 = new SimpleNode(JJTMUL);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 Priority3(1)/*@bgen(jjtree)*/
 } catch (Throwable jjte001) {
   if (jjtc001) {
     jjtree.clearNodeScope(jjtn001);
     jjtc001 = false;
   } else {
     jjtree.popNode();
   }
   if (jjte001 instanceof RuntimeException) {
     throw (RuntimeException)jjte001;
   }
   if (jjte001 instanceof ParseException) {
     throw (ParseException)jjte001;
   }
   throw (Error)jjte001;
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  2);
   }
 }
/*@egen*/        
 )?
}

void Priority3(int sign)      : {} // 1: positive; -1: negative
{
 Priority4(sign)
 (
  < TRANSPOSE >
 )?
 (/*@bgen(jjtree) #Tra( 2) */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTTRA);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   Priority4(1)/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001,  2);
     }
   }
/*@egen*/        
 )?
}

void Priority4(int sign)      : {Token i;}
{
 < PARENTHESIS_LEFT >
  Priority1(sign)
  < PARENTHESIS_RIGHT >

 | i=< SYMBOL >/*@bgen(jjtree) Matrix */
 {
   SimpleNode jjtn001 = new SimpleNode(JJTMATRIX);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*//*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn001, true);
   jjtc001 = false;
 }
/*@egen*/
 {
   jjtn001.jjtSetValue( i.image); 	
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001, true);
   }
 }
/*@egen*/        
}
